name: Checks

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail {0}

jobs:
  check:
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        runner:
          - ubuntu-latest
        deno-version:
          - 1.32.0
          - 1.x
    runs-on: ${{ matrix.runner }}
    name: >-
      Other checks --
      Deno ${{ matrix.deno-version }}
    steps:
      - uses: actions/checkout@v4
        timeout-minutes: 1
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}
        timeout-minutes: 1
      - uses: actions/cache@v3
        with:
          path: .deno
          key: ${{ runner.os }}--deno-${{ matrix.deno-version }}--${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}--deno-${{ matrix.deno-version }}--
            ${{ runner.os }}--
        timeout-minutes: 1
      - name: Check if deno files are formatted
        run: make fmt-check
        timeout-minutes: 1
      - name: Lint deno files
        run: make lint
        timeout-minutes: 1
      - name: Type-check deno files
        run: make typecheck
        timeout-minutes: 1

  test:
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        runner:
          - windows-latest
          - macos-latest
          - ubuntu-latest
        deno-version:
          - 1.32.0
          - 1.x
        host-version:
          - vim: v9.0.1499
            nvim: v0.8.0
          - vim: nightly
            nvim: nightly
    runs-on: ${{ matrix.runner }}
    name: >-
      Test --
      Deno ${{ matrix.deno-version }} &&
      Vim ${{ matrix.host-version.vim }} &&
      Neovim ${{ matrix.host-version.nvim }}
      on ${{ matrix.runner }}
    steps:
      - run: git config --global core.autocrlf false
        if: runner.os == 'Windows'
        timeout-minutes: 1
      - uses: actions/checkout@v4
        with:
          path: ./repo
        timeout-minutes: 1
      - uses: actions/checkout@v4
        with:
          repository: vim-denops/denops.vim
          path: ./denops.vim
        timeout-minutes: 1
      - uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ matrix.deno-version }}
        timeout-minutes: 1
      - uses: actions/cache@v3
        with:
          path: .deno
          key: ${{ runner.os }}--deno-${{ matrix.deno-version }}--vim-${{ matrix.host-version.vim }}--nvim-${{ matrix.host-version.nvim }}--${{ hashFiles('**/*.ts') }}
          restore-keys: |
            ${{ runner.os }}--deno-${{ matrix.deno-version }}--vim-${{ matrix.host-version.vim }}--nvim-${{ matrix.host-version.nvim }}--
            ${{ runner.os }}--deno-${{ matrix.deno-version }}--vim-${{ matrix.host-version.vim }}--
            ${{ runner.os }}--deno-${{ matrix.deno-version }}--
            ${{ runner.os }}--
        timeout-minutes: 1
      - uses: rhysd/action-setup-vim@v1
        id: vim
        with:
          neovim: false
          version: ${{ matrix.host-version.vim }}
        timeout-minutes: 10
      - name: Check Vim
        run: |
          echo "${DENOPS_TEST_VIM}"
          "${DENOPS_TEST_VIM}" --version
        env:
          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable }}
        timeout-minutes: 1
      - uses: rhysd/action-setup-vim@v1
        id: nvim
        with:
          neovim: true
          version: ${{ matrix.host-version.nvim }}
        timeout-minutes: 10
      - name: Check Neovim
        run: |
          echo "${DENOPS_TEST_NVIM}"
          "${DENOPS_TEST_NVIM}" --version
        env:
          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable }}
        timeout-minutes: 1
      - name: Run deno tests
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          max_attempts: 3
          command: |
            cd ./repo
            make test-deno
        env:
          DENO_DIR: ../.deno
          DENOPS_TEST_DENOPS_PATH: ../denops.vim
          DENOPS_TEST_VIM: ${{ steps.vim.outputs.executable }}
          DENOPS_TEST_NVIM: ${{ steps.nvim.outputs.executable }}
        timeout-minutes: 10
